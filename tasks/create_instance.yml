- name: "create_instance | Import, copy and enable ApacheDS instance {{ instance.name }}"
  block:
    - name: "create_instance | Check if install dir exist"
      register: file_check
      ansible.builtin.stat:
        path: "{{ install_apacheds__path }}/instances/{{ instance.name }}"

    - name: "create_instance | Create instance dir for {{ instance.name }}"
      when: not file_check.stat.exists
      ansible.builtin.file:
        path: "{{ install_apacheds__path }}/instances/{{ instance.name }}"
        state: directory
        recurse: yes
        mode: "0700"
        group: "{{ install_apacheds__group }}"
        owner: "{{ install_apacheds__user }}"

    - name: "create_instance | Instance not found, import / copy the default one"
      when: not file_check.stat.exists
      ansible.builtin.copy:
        src: "{{ install_apacheds__path }}/instances/default/"
        dest: "{{ install_apacheds__path }}/instances/{{ instance.name }}/"
        remote_src: true
        mode: "0700"
        group: "{{ install_apacheds__group }}"
        owner: "{{ install_apacheds__user }}"

    - name: "create_instance | Import Log4j configuration file for {{ instance.name }}"
      ansible.builtin.template:
        src: "templates/log4j.properties.j2"
        dest: "{{ install_apacheds__path }}/instances/{{ instance.name }}/conf/log4j.properties"
        mode: "0700"
        group: "{{ install_apacheds__group }}"
        owner: "{{ install_apacheds__user }}"

    - name: "create_instance | Import ApacheDS instance service file for {{ instance.name }}"
      ansible.builtin.template:
        src: "templates/instance.service.j2"
        dest: "/etc/systemd/system/apacheds_{{ instance.name }}.service"
        owner: "root"
        group: "root"
        mode: "0700"

    - name: "create_instance | Handle JKS for {{ instance.name }}"
      when: instance.ssl | default (false)
      block:
      - name: "create_instance | Check if JKS exist for {{ instance.name }}"
        register: jks_path_stat
        ansible.builtin.stat:
          path: "{{ install_apacheds__path }}/instances/{{ instance.name }}/keystore.jks"

      - name: "create_instance | Remove JKS for {{ instance.name }}"
        when: jks_path_stat.stat.exists
        register: output
        changed_when: output.state != "absent"
        ansible.builtin.file:
          path: "{{ install_apacheds__path }}/instances/{{ instance.name }}/keystore.jks"
          state: absent
          mode: "0770"
          group: "{{ install_apacheds__group }}"
          owner: "{{ install_apacheds__user }}"

      - name: "create_instance | Create the P12 file for {{ instance.name }}"
        register: output
        changed_when: output.rc != 0
        ansible.builtin.command: "openssl pkcs12 -export -inkey {{ instance.key_file }} -in {{ instance.crt_file }} -out {{ install_apacheds__path }}/instances/{{ instance.name }}/keystore.p12 -password pass:{{ instance.jks_password }}"

      - name: "create_instance | Create the JKS file for {{ instance.name }}"
        register: output
        changed_when: output.rc != 0
        ansible.builtin.command: "keytool -importkeystore -srckeystore {{ install_apacheds__path }}/instances/{{ instance.name }}/keystore.p12 -srcstoretype PKCS12 -destkeystore {{ install_apacheds__path }}/instances/{{ instance.name }}/keystore.jks -srcstorepass '{{ instance.jks_password }}' -deststorepass '{{ instance.jks_password }}' -noprompt"

      - name: "create_instance | Set final permissions for {{ instance.name }}"
        register: output
        changed_when: output.size < 0
        ansible.builtin.file:
          path: "{{ install_apacheds__path }}/instances/{{ instance.name }}"
          state: directory
          recurse: yes
          mode: "0700"
          group: "{{ install_apacheds__group }}"
          owner: "{{ install_apacheds__user }}"

    - name: "create_instance | Enable and restart ApacheDS for {{ instance.name }}"
      register: install_apacheds__service_status
      changed_when: not install_apacheds__service_status.state != "restarted"
      ansible.builtin.service:
        name: "apacheds_{{ instance.name }}"
        state: "restarted"
        daemon_reload: true
        enabled: yes

    - name: "create_instance | Check ApacheDS connectivities LDAP for {{ instance.name }}"
      ansible.builtin.wait_for:
        host: "{{ inventory_hostname }}"
        port: "10389"
        timeout: 240

    - name: "create_instance | Check ApacheDS connectivities LDAPS for {{ instance.name }}"
      when: instance.ssl | default(false)
      ansible.builtin.wait_for:
        host: "{{ inventory_hostname }}"
        port: "10636"
        timeout: 240

    - name: "create_instance | Change the default admin password for {{ instance.name }}"
      register: admin_instance_result
      failed_when: admin_instance_result.stdout != ""
      changed_when: admin_instance_result.rc != 0 and  admin_instance_result.rc != 49
      ansible.builtin.command: >
        ldappasswd -x -H 'ldap://{{ inventory_hostname }}:10389' -D "uid=admin,ou=system" -w 'secret' -s '{{ instance.password }}'
