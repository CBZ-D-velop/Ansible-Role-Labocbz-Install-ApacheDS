- name: "create_instance | Import, copy and enable ApacheDS instance {{ instance.name }}"
  block:
    - name: "create_instance | Check if install dir exist"
      register: file_check
      ansible.builtin.stat:
        path: "{{ install_apacheds_path }}/instances/{{ instance.name }}"

    - name: "create_instance | Create instance dir for {{ instance.name }}"
      when: not file_check.stat.exists
      ansible.builtin.file:
        path: "{{ install_apacheds_path }}/instances/{{ instance.name }}"
        state: directory
        recurse: yes
        mode: "0700"
        group: "{{ install_apacheds_group }}"
        owner: "{{ install_apacheds_user }}"

    - name: "create_instance | Instance not found, import / copy the default one"
      when: not file_check.stat.exists
      ansible.builtin.copy:
        src: "{{ install_apacheds_path }}/instances/default/"
        dest: "{{ install_apacheds_path }}/instances/{{ instance.name }}/"
        remote_src: true
        mode: "0700"
        group: "{{ install_apacheds_group }}"
        owner: "{{ install_apacheds_user }}"

    - name: "create_instance | Import Log4j configuration file for {{ instance.name }}"
      ansible.builtin.template:
        src: "templates/log4j.properties.j2"
        dest: "{{ install_apacheds_path }}/instances/{{ instance.name }}/conf/log4j.properties"
        mode: "0700"
        group: "{{ install_apacheds_group }}"
        owner: "{{ install_apacheds_user }}"

    - name: "create_instance | Import ApacheDS instance service file for {{ instance.name }}"
      ansible.builtin.template:
        src: "templates/instance.service.j2"
        dest: "/etc/systemd/system/apacheds_{{ instance.name }}.service"
        owner: "root"
        group: "root"
        mode: "0700"

    - name: "Set the LDAP instance port for {{ instance.name }}"
      when: not file_check.stat.exists
      ansible.builtin.replace:
        path: "{{ install_apacheds_path }}/instances/{{ instance.name }}/conf/config.ldif"
        regexp: "ads-systemport: 10389"
        replace: "ads-systemport: {{ instance.ldap_port }}"

    - name: "Set the LDAPS instance port for {{ instance.name }}"
      when: not file_check.stat.exists
      ansible.builtin.replace:
        path: "{{ install_apacheds_path }}/instances/{{ instance.name }}/conf/config.ldif"
        regexp: "ads-systemport: 10636"
        replace: "ads-systemport: {{ instance.ldaps_port }}" 

    - name: "create_instance | Enable and restart ApacheDS"
      register: install_apacheds_service_status
      changed_when: not install_apacheds_service_status.state != "restarted"
      ansible.builtin.service:
        name: "apacheds_{{ instance.name }}"
        state: "restarted"
        daemon_reload: true
        enabled: yes

    - name: "create_instance | Check ApacheDS connectivities"
      ansible.builtin.wait_for:
        host: "{{ inventory_hostname }}"
        port: "{{ instance.ldap_port }}"
        timeout: 240

    - name: "create_instance | Change the default admin password for {{ instance.name }}"
      register: admin_instance_result
      failed_when: admin_instance_result.stdout != ""
      changed_when: admin_instance_result.rc != 0 and  admin_instance_result.rc != 49
      ansible.builtin.command: >
        ldappasswd -x -H ldap://{{ inventory_hostname }}:{{ instance.ldap_port }} -D "uid=admin,ou=system" -w 'secret' -s '{{ instance.password }}'
